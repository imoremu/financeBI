{
  "version": "1.0",
  "conceptualSchemaSettings": {},
  "queries": [
    {
      "name": "Saldo",
      "lineageTag": "ead767c0-2b14-4c09-a56f-681fb4332782",
      "queryGroupId": "3c6be78f-01f8-44b2-9b46-61c4ac6f0621",
      "navigationStepName": "Navegación",
      "text": [
        "let",
        "    Origen = #\"Origen Data File\",",
        "    T_Saldo_Table = Origen{[Item=\"T_Saldo\",Kind=\"Table\"]}[Data],",
        "    #\"Tipo cambiado\" = Table.TransformColumnTypes(T_Saldo_Table,{{\"Fecha\", type date}, {\"Producto\", type text}, {\"Saldo\", Currency.Type}, {\"Participaciones\", type number}, {\"Valor liquidativo\", Currency.Type}}),",
        "    #\"Consulta anexada\" = Table.Combine({#\"Tipo cambiado\", #\"Transacciones Agrupadas\"}),",
        "    // Remove rows without Cash Balance. ",
        "    // These rows are those transactions without cash information because we don't have sotcks and price.",
        "    // The cash balance is calculated then in a measure as Last Cash Balance + all transactions value",
        "    #\"Filas filtradas\" = Table.SelectRows(#\"Consulta anexada\", each [Saldo] <> null and [Saldo] <> \"\"),",
        "    #\"[Remove] Duplicados Fecha / Producto\" = Table.Distinct(#\"Filas filtradas\", {\"Fecha\", \"Producto\"}),",
        "    #\"Año insertado\" = Table.AddColumn(#\"[Remove] Duplicados Fecha / Producto\", \"Año\", each Date.Year([Fecha]), Int64.Type),",
        "    #\"Agregar columna personalizada\" = Table.AddColumn(#\"Año insertado\", \"Mes / Año\", each Date.Year([Fecha]) * 100 + Date.Month([Fecha]), Int64.Type),",
        "    #\"[Order] Fecha\" = Table.Sort(#\"Agregar columna personalizada\",{{\"Fecha\", Order.Ascending}}),",
        "    Buffer = Table.Buffer(#\"[Order] Fecha\")",
        "in",
        "    Buffer"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Origen = Excel.Workbook(File.Contents(Path), null, true),\\n    T_Saldo_Table = Origen{[Item=\\\"T_Saldo\\\",Kind=\\\"Table\\\"]}[Data],\\n    #\\\"Tipo cambiado\\\" = Table.TransformColumnTypes(T_Saldo_Table,{{\\\"Fecha\\\", type date}, {\\\"Producto\\\", type text}, {\\\"Saldo\\\", Currency.Type}, {\\\"Participaciones\\\", type number}, {\\\"Valor liquidativo\\\", Currency.Type}}),\\n    #\\\"Consulta anexada\\\" = Table.Combine({#\\\"Tipo cambiado\\\", #\\\"Transacciones Agrupadas\\\"}),\\n    // Remove rows without Cash Balance. \\n    // These rows are those transactions without cash information because we don't have sotcks and price.\\n    // The cash balance is calculated then in a measure as Last Cash Balance + all transactions value\\n    #\\\"Filas filtradas\\\" = Table.SelectRows(#\\\"Consulta anexada\\\", each [Saldo] <> null and [Saldo] <> \\\"\\\"),\\n    #\\\"[Remove] Duplicados Fecha / Producto\\\" = Table.Distinct(#\\\"Filas filtradas\\\", {\\\"Fecha\\\", \\\"Producto\\\"}),\\n    #\\\"Año insertado\\\" = Table.AddColumn(#\\\"[Remove] Duplicados Fecha / Producto\\\", \\\"Año\\\", each Date.Year([Fecha]), Int64.Type),\\n    #\\\"Agregar columna personalizada\\\" = Table.AddColumn(#\\\"Año insertado\\\", \\\"Mes / Año\\\", each Date.Year([Fecha]) * 100 + Date.Month([Fecha]), Int64.Type),\\n    #\\\"[Order] Fecha\\\" = Table.Sort(#\\\"Agregar columna personalizada\\\",{{\\\"Fecha\\\", Order.Ascending}}),\\n    Buffer = Table.Buffer(#\\\"[Order] Fecha\\\")\\nin\\n    Buffer\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Exception",
      "isHidden": false
    },
    {
      "name": "Movimientos",
      "lineageTag": "d4a0e9fb-69d2-47ed-b104-d7bf44c733ad",
      "queryGroupId": "f68b0a3d-1780-4ae2-ad40-039a03b8127b",
      "navigationStepName": "Navegación",
      "text": [
        "let",
        "    Origen = #\"Movimientos Origen\",",
        "    #\"Tipo cambiado\" = Table.TransformColumnTypes(Origen,{{\"FECHA\", type date}, {\"CLASIFICACIÓN\", type text}, {\"IMPORTE (€)\", Currency.Type}, {\"CATEGORÍA\", type text}, {\"SUBCATEGORÍA\", type text}, {\"DESCRIPCIÓN\", type text}}),",
        "    #\"Filas filtradas\" = Table.SelectRows(#\"Tipo cambiado\", each ([#\"IMPORTE (€)\"] <> 0)),",
        "    #\"[Type] Gasto to $\" = Table.TransformColumnTypes(#\"Filas filtradas\",{{\"IMPORTE (€)\", Currency.Type}}),",
        "    #\"[Column] New Valor (ABS)\" = Table.AddColumn(#\"[Type] Gasto to $\", \"Cantidad (€)\", each Number.Abs([#\"IMPORTE (€)\"])),",
        "    #\"[Update] Importe de movimientos a 0\" = Table.ReplaceValue(#\"[Column] New Valor (ABS)\",each [#\"IMPORTE (€)\"], each if [TIPO] = \"Movimiento\" then 0 else [#\"IMPORTE (€)\"],Replacer.ReplaceValue,{\"IMPORTE (€)\"}),",
        "    #\"[Type] Importe To $\" = Table.TransformColumnTypes(#\"[Update] Importe de movimientos a 0\",{{\"IMPORTE (€)\", Currency.Type}, {\"Cantidad (€)\", Currency.Type}}),",
        "    #\"Consultas combinadas\" = Table.NestedJoin(#\"[Type] Importe To $\", {\"CLASIFICACIÓN\", \"CATEGORÍA\", \"SUBCATEGORÍA\", \"DESCRIPCIÓN\", \"TIPO\"}, #\"Tipo Movimiento\", {\"CLASIFICACIÓN\", \"CATEGORÍA\", \"SUBCATEGORÍA\", \"DESCRIPCIÓN\", \"TIPO\"}, \"Tipo Movimiento\", JoinKind.LeftOuter),",
        "    #\"Se expandió Tipo Movimiento\" = Table.ExpandTableColumn(#\"Consultas combinadas\", \"Tipo Movimiento\", {\"Índice\"}, {\"Tipo Movimiento.Índice\"}),",
        "    #\"Otras columnas quitadas\" = Table.SelectColumns(#\"Se expandió Tipo Movimiento\",{\"FECHA\", \"IMPORTE (€)\", \"Detalle\", \"Cantidad (€)\", \"Tipo Movimiento.Índice\"}),",
        "    #\"Consulta anexada\" = Table.Combine({#\"Otras columnas quitadas\", #\"Pagos Especie\", #\"Cobros Especie\"}),",
        "    #\"Agregar columna personalizada\" = Table.AddColumn(#\"Consulta anexada\", \"Mes / Año\", each Text.Combine({Date.ToText([FECHA], \"MM\"), \"-\", Date.ToText([FECHA], \"yyyy\")}), type text),",
        "    #\"Año insertado\" = Table.AddColumn(#\"Agregar columna personalizada\", \"Año\", each Date.Year([FECHA]), Int64.Type)",
        "in",
        "    #\"Año insertado\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Origen = #\\\"Movimientos Origen\\\",\\n    #\\\"Tipo cambiado\\\" = Table.TransformColumnTypes(Origen,{{\\\"FECHA\\\", type date}, {\\\"CLASIFICACIÓN\\\", type text}, {\\\"IMPORTE (€)\\\", Currency.Type}, {\\\"CATEGORÍA\\\", type text}, {\\\"SUBCATEGORÍA\\\", type text}, {\\\"DESCRIPCIÓN\\\", type text}}),\\n    #\\\"Filas filtradas\\\" = Table.SelectRows(#\\\"Tipo cambiado\\\", each ([#\\\"IMPORTE (€)\\\"] <> 0)),\\n    #\\\"[Type] Gasto to $\\\" = Table.TransformColumnTypes(#\\\"Filas filtradas\\\",{{\\\"IMPORTE (€)\\\", Currency.Type}}),\\n    #\\\"[Column] New Valor (ABS)\\\" = Table.AddColumn(#\\\"[Type] Gasto to $\\\", \\\"Cantidad (€)\\\", each Number.Abs([#\\\"IMPORTE (€)\\\"])),\\n    #\\\"[Update] Importe de movimientos a 0\\\" = Table.ReplaceValue(#\\\"[Column] New Valor (ABS)\\\",each [#\\\"IMPORTE (€)\\\"], each if [TIPO] = \\\"Movimiento\\\" then 0 else [#\\\"IMPORTE (€)\\\"],Replacer.ReplaceValue,{\\\"IMPORTE (€)\\\"}),\\n    #\\\"[Type] Importe To $\\\" = Table.TransformColumnTypes(#\\\"[Update] Importe de movimientos a 0\\\",{{\\\"IMPORTE (€)\\\", Currency.Type}, {\\\"Cantidad (€)\\\", Currency.Type}}),\\n    #\\\"Consultas combinadas\\\" = Table.NestedJoin(#\\\"[Type] Importe To $\\\", {\\\"CLASIFICACIÓN\\\", \\\"CATEGORÍA\\\", \\\"SUBCATEGORÍA\\\", \\\"DESCRIPCIÓN\\\", \\\"TIPO\\\"}, #\\\"Tipo Movimiento\\\", {\\\"CLASIFICACIÓN\\\", \\\"CATEGORÍA\\\", \\\"SUBCATEGORÍA\\\", \\\"DESCRIPCIÓN\\\", \\\"TIPO\\\"}, \\\"Tipo Movimiento\\\", JoinKind.LeftOuter),\\n    #\\\"Se expandió Tipo Movimiento\\\" = Table.ExpandTableColumn(#\\\"Consultas combinadas\\\", \\\"Tipo Movimiento\\\", {\\\"Índice\\\"}, {\\\"Tipo Movimiento.Índice\\\"}),\\n    #\\\"Otras columnas quitadas\\\" = Table.SelectColumns(#\\\"Se expandió Tipo Movimiento\\\",{\\\"FECHA\\\", \\\"IMPORTE (€)\\\", \\\"Detalle\\\", \\\"Cantidad (€)\\\", \\\"Tipo Movimiento.Índice\\\"}),\\n    #\\\"Consulta anexada\\\" = Table.Combine({#\\\"Otras columnas quitadas\\\", #\\\"Pagos Especie\\\", #\\\"Cobros Especie\\\"}),\\n    #\\\"Agregar columna personalizada\\\" = Table.AddColumn(#\\\"Consulta anexada\\\", \\\"Mes / Año\\\", each Text.Combine({Date.ToText([FECHA], \\\"MM\\\"), \\\"-\\\", Date.ToText([FECHA], \\\"yyyy\\\")}), type text),\\n    #\\\"Año insertado\\\" = Table.AddColumn(#\\\"Agregar columna personalizada\\\", \\\"Año\\\", each Date.Year([FECHA]), Int64.Type)\\nin\\n    #\\\"Año insertado\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Productos",
      "lineageTag": "2223fd4a-620e-4df7-821d-57b4570c079a",
      "queryGroupId": "3c6be78f-01f8-44b2-9b46-61c4ac6f0621",
      "navigationStepName": "Navegación",
      "text": [
        "let",
        "    Origen = Excel.Workbook(File.Contents(Path), null, true),",
        "    T_Saldo_Table = Origen{[Item=\"T_Elementos\",Kind=\"Table\"]}[Data],",
        "    #\"Tipo cambiado\" = Table.TransformColumnTypes(T_Saldo_Table,{{\"Producto\", type text}, {\"Tipo\", type text}, {\"Subtipo\", type text}, {\"Detalle\", type text}}),",
        "    #\"Otras columnas quitadas\" = Table.SelectColumns(#\"Tipo cambiado\",{\"Subtipo\", \"Tipo\", \"Producto\"}),",
        "    #\"Duplicados quitados\" = Table.Distinct(#\"Otras columnas quitadas\"),",
        "    #\"Columnas reordenadas\" = Table.ReorderColumns(#\"Duplicados quitados\",{\"Producto\", \"Tipo\", \"Subtipo\"})",
        "in",
        "    #\"Columnas reordenadas\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Origen = Excel.Workbook(File.Contents(Path), null, true),\\n    T_Saldo_Table = Origen{[Item=\\\"T_Elementos\\\",Kind=\\\"Table\\\"]}[Data],\\n    #\\\"Tipo cambiado\\\" = Table.TransformColumnTypes(T_Saldo_Table,{{\\\"Producto\\\", type text}, {\\\"Tipo\\\", type text}, {\\\"Subtipo\\\", type text}, {\\\"Detalle\\\", type text}}),\\n    #\\\"Otras columnas quitadas\\\" = Table.SelectColumns(#\\\"Tipo cambiado\\\",{\\\"Subtipo\\\", \\\"Tipo\\\", \\\"Producto\\\"}),\\n    #\\\"Duplicados quitados\\\" = Table.Distinct(#\\\"Otras columnas quitadas\\\"),\\n    #\\\"Columnas reordenadas\\\" = Table.ReorderColumns(#\\\"Duplicados quitados\\\",{\\\"Producto\\\", \\\"Tipo\\\", \\\"Subtipo\\\"})\\nin\\n    #\\\"Columnas reordenadas\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Exception",
      "isHidden": false
    },
    {
      "name": "Tipo Movimiento",
      "lineageTag": "79a691e9-e5d7-43f9-a51f-2164edd3cd31",
      "queryGroupId": "f68b0a3d-1780-4ae2-ad40-039a03b8127b",
      "navigationStepName": "Navegación",
      "text": [
        "let",
        "    Origen = #\"Origen Data File\",",
        "    T_Movimientos_Table = Origen{[Item=\"T_Movimientos\",Kind=\"Table\"]}[Data],",
        "    #\"Tipo cambiado\" = Table.TransformColumnTypes(T_Movimientos_Table,{{\"FECHA\", type date}, {\"CLASIFICACIÓN\", type text}, {\"IMPORTE (€)\", Currency.Type}, {\"CATEGORÍA\", type text}, {\"SUBCATEGORÍA\", type text}, {\"DESCRIPCIÓN\", type text}}),",
        "    #\"Filas filtradas\" = Table.SelectRows(#\"Tipo cambiado\", each ([#\"IMPORTE (€)\"] <> 0)),",
        "    #\"Otras columnas quitadas\" = Table.SelectColumns(#\"Filas filtradas\",{\"CLASIFICACIÓN\", \"CATEGORÍA\", \"SUBCATEGORÍA\", \"DESCRIPCIÓN\", \"TIPO\"}),",
        "    #\"Duplicados quitados\" = Table.Distinct(#\"Otras columnas quitadas\"),",
        "    #\"Consulta anexada\" = Table.Combine({#\"Duplicados quitados\", #\"Tipo Pago Especie\", #\"Tipo Cobro Especie\"}),",
        "    #\"Índice agregado\" = Table.AddIndexColumn(#\"Consulta anexada\", \"Índice\", 0, 1, Int64.Type),",
        "    #\"Columnas reordenadas\" = Table.ReorderColumns(#\"Índice agregado\",{\"Índice\", \"CLASIFICACIÓN\", \"CATEGORÍA\", \"SUBCATEGORÍA\", \"DESCRIPCIÓN\", \"TIPO\"})",
        "in",
        "    #\"Columnas reordenadas\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Origen = Excel.Workbook(File.Contents(Path), null, true),\\n    T_Movimientos_Table = Origen{[Item=\\\"T_Movimientos\\\",Kind=\\\"Table\\\"]}[Data],\\n    #\\\"Tipo cambiado\\\" = Table.TransformColumnTypes(T_Movimientos_Table,{{\\\"FECHA\\\", type date}, {\\\"CLASIFICACIÓN\\\", type text}, {\\\"IMPORTE (€)\\\", Currency.Type}, {\\\"CATEGORÍA\\\", type text}, {\\\"SUBCATEGORÍA\\\", type text}, {\\\"DESCRIPCIÓN\\\", type text}}),\\n    #\\\"Filas filtradas\\\" = Table.SelectRows(#\\\"Tipo cambiado\\\", each ([#\\\"IMPORTE (€)\\\"] <> 0)),\\n    #\\\"Otras columnas quitadas\\\" = Table.SelectColumns(#\\\"Filas filtradas\\\",{\\\"CLASIFICACIÓN\\\", \\\"CATEGORÍA\\\", \\\"SUBCATEGORÍA\\\", \\\"DESCRIPCIÓN\\\", \\\"TIPO\\\"}),\\n    #\\\"Duplicados quitados\\\" = Table.Distinct(#\\\"Otras columnas quitadas\\\"),\\n    #\\\"Consulta anexada\\\" = Table.Combine({#\\\"Duplicados quitados\\\", #\\\"Tipo Pago Especie\\\", #\\\"Tipo Cobro Especie\\\"}),\\n    #\\\"Índice agregado\\\" = Table.AddIndexColumn(#\\\"Consulta anexada\\\", \\\"Índice\\\", 0, 1, Int64.Type),\\n    #\\\"Columnas reordenadas\\\" = Table.ReorderColumns(#\\\"Índice agregado\\\",{\\\"Índice\\\", \\\"CLASIFICACIÓN\\\", \\\"CATEGORÍA\\\", \\\"SUBCATEGORÍA\\\", \\\"DESCRIPCIÓN\\\", \\\"TIPO\\\"})\\nin\\n    #\\\"Columnas reordenadas\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Path",
      "lineageTag": "a2aa19e7-94ab-40b4-b77d-780b67c32947",
      "navigationStepName": "Navegación",
      "text": [
        "\"https://github.com/imoremu/financeBI/raw/refs/heads/main/data/dev/data.xlsx\" meta [IsParameterQuery=true, Type=\"Any\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Text",
      "isHidden": false
    },
    {
      "name": "Medidas Movimientos",
      "lineageTag": "30bd2545-c205-453b-a2f3-858bc695c399",
      "queryGroupId": "f68b0a3d-1780-4ae2-ad40-039a03b8127b",
      "navigationStepName": "Navegación",
      "text": [
        "let",
        "    Origen = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i44FAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Columna1 = _t]),",
        "    #\"Tipo cambiado\" = Table.TransformColumnTypes(Origen,{{\"Columna1\", type text}}),",
        "    #\"Columnas quitadas\" = Table.RemoveColumns(#\"Tipo cambiado\",{\"Columna1\"})",
        "in",
        "    #\"Columnas quitadas\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Origen = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\\\"i44FAA==\\\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Columna1 = _t]),\\n    #\\\"Tipo cambiado\\\" = Table.TransformColumnTypes(Origen,{{\\\"Columna1\\\", type text}}),\\n    #\\\"Columnas quitadas\\\" = Table.RemoveColumns(#\\\"Tipo cambiado\\\",{\\\"Columna1\\\"})\\nin\\n    #\\\"Columnas quitadas\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Especie",
      "lineageTag": "6df10bda-7c31-4f86-8cfa-cf0faa72dbfa",
      "queryGroupId": "f68b0a3d-1780-4ae2-ad40-039a03b8127b",
      "navigationStepName": "Navegación",
      "text": [
        "let",
        "    Origen = #\"Origen Data File\",",
        "    #\"Filas filtradas1\" = Table.SelectRows(Origen, each ([Name] = \"T_Pagos_Especie\")),",
        "    #\"Otras columnas quitadas\" = Table.SelectColumns(#\"Filas filtradas1\",{\"Data\"}),",
        "    #\"Se expandió Data\" = Table.ExpandTableColumn(#\"Otras columnas quitadas\", \"Data\", {\"Concepto\", \"Año\", \"Mes\", \"CLASIFICACION COBRO\", \"CLASIFICACION PAGO\", \"IMPORTE (€)\"}, {\"Concepto\", \"Año / Concepto\", \"Mes / Concepto\", \"CLASIFICACION COBRO\", \"CLASIFICACION PAGO\", \"IMPORTE (€)\"}),",
        "    #\"Consultas combinadas\" = Table.NestedJoin(#\"Se expandió Data\", {\"Año / Concepto\"}, Años, {\"*\"}, \"Años\", JoinKind.LeftOuter),",
        "    #\"Se expandió Años\" = Table.ExpandTableColumn(#\"Consultas combinadas\", \"Años\", {\"FECHA\"}, {\"Años.FECHA\"}),",
        "    #\"Agregar columna personalizada\" = Table.AddColumn(#\"Se expandió Años\", \"Año\", each if [Años.FECHA]= null then [#\"Año / Concepto\"] else [Años.FECHA], type text),",
        "    #\"Consultas combinadas1\" = Table.NestedJoin(#\"Agregar columna personalizada\", {\"Año\", \"Mes / Concepto\"}, Meses, {\"Año\", \"*\"}, \"Meses\", JoinKind.LeftOuter),",
        "    #\"Tipo cambiado\" = Table.TransformColumnTypes(#\"Consultas combinadas1\",{{\"Mes / Concepto\", type text}}),",
        "    #\"Se expandió Meses\" = Table.ExpandTableColumn(#\"Tipo cambiado\", \"Meses\", {\"Mes\"}, {\"Meses.Mes\"}),",
        "    #\"[Columna] Meses]\" = Table.AddColumn(#\"Se expandió Meses\", \"Mes\", each if [Meses.Mes]= null then [#\"Mes / Concepto\"] else [Meses.Mes], type text),",
        "    #\"Otras columnas quitadas1\" = Table.SelectColumns(#\"[Columna] Meses]\",{\"IMPORTE (€)\", \"Año\", \"Mes\", \"CLASIFICACION COBRO\", \"CLASIFICACION PAGO\", \"Concepto\"}),",
        "    #\"Personalizada agregada\" = Table.AddColumn(#\"Otras columnas quitadas1\", \"CATEGORÍA\", each \"Especie\"),",
        "    #\"Consultas combinadas2\" = Table.NestedJoin(#\"Personalizada agregada\", {\"Mes\", \"Año\"}, Meses, {\"Mes\", \"Año\"}, \"Meses\", JoinKind.Inner),",
        "    #\"Se expandió Meses1\" = Table.ExpandTableColumn(#\"Consultas combinadas2\", \"Meses\", {\"Índice\"}, {\"Meses.Índice\"}),",
        "    #\"Columna combinada insertada\" = Table.AddColumn(#\"Se expandió Meses1\", \"FECHA\", each Text.Combine({\"1/\", Text.From([Meses.Índice], \"es-ES\"), \"/\", Text.From([Año], \"es-ES\")}), type text),",
        "    #\"Tipo cambiado1\" = Table.TransformColumnTypes(#\"Columna combinada insertada\",{{\"FECHA\", type date}})",
        "in",
        "    #\"Tipo cambiado1\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Años",
      "lineageTag": "b608a801-da5d-4734-af75-03e171a22723",
      "queryGroupId": "f68b0a3d-1780-4ae2-ad40-039a03b8127b",
      "navigationStepName": "Navegación",
      "text": [
        "let",
        "    Origen = #\"Movimientos Origen\",",
        "    #\"Otras columnas quitadas\" = Table.SelectColumns(Origen,{\"FECHA\"}),",
        "    #\"Año extraído\" = Table.TransformColumns(#\"Otras columnas quitadas\",{{\"FECHA\", Date.Year, Int64.Type}}),",
        "    #\"Duplicados quitados\" = Table.Distinct(#\"Año extraído\"),",
        "    #\"Personalizada agregada\" = Table.AddColumn(#\"Duplicados quitados\", \"Personalizado\", each \"*\"),",
        "    #\"Columnas con nombre cambiado\" = Table.RenameColumns(#\"Personalizada agregada\",{{\"Personalizado\", \"*\"}})",
        "in",
        "    #\"Columnas con nombre cambiado\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Meses",
      "lineageTag": "bcb08a50-39a7-4e62-8cdd-7ea8d37bb2ae",
      "queryGroupId": "f68b0a3d-1780-4ae2-ad40-039a03b8127b",
      "navigationStepName": "Navegación",
      "text": [
        "let",
        "    Origen = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45Wcs1LLcpXitWJVnJLTSqCsX0Ti6ogLMekoswcqFglRMirNC8TxsqBshzT84tLIMzg1IKSzNRcoGFgrn9ySSmM7ZdfhiTjkpkM48UCAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Mes = _t]),",
        "    #\"Índice agregado\" = Table.AddIndexColumn(Origen, \"Índice\", 1, 1, Int64.Type),",
        "    #\"Personalizada agregada\" = Table.AddColumn(#\"Índice agregado\", \"*\", each \"*\"),",
        "    #\"Tipo cambiado\" = Table.TransformColumnTypes(#\"Personalizada agregada\",{{\"Mes\", type text}}),",
        "    #\"Consultas combinadas\" = Table.NestedJoin(#\"Tipo cambiado\", {\"*\"}, Años, {\"*\"}, \"Años\", JoinKind.LeftOuter),",
        "    #\"Se expandió Años\" = Table.ExpandTableColumn(#\"Consultas combinadas\", \"Años\", {\"FECHA\"}, {\"Año\"}),",
        "    #\"Consultas combinadas1\" = Table.NestedJoin(#\"Se expandió Años\", {\"Índice\", \"Año\"}, #\"Meses con Datos\", {\"Mes\", \"Año\"}, \"Meses con Datos\", JoinKind.RightOuter),",
        "    #\"Se expandió Meses con Datos\" = Table.ExpandTableColumn(#\"Consultas combinadas1\", \"Meses con Datos\", {\"Mes\", \"Año\"}, {\"Meses con Datos.Mes\", \"Meses con Datos.Año\"}),",
        "    #\"Otras columnas quitadas\" = Table.SelectColumns(#\"Se expandió Meses con Datos\",{\"Mes\", \"Índice\", \"*\", \"Año\"}),",
        "    #\"Columna combinada insertada\" = Table.AddColumn(#\"Otras columnas quitadas\", \"FECHA\", each Text.Combine({\"01/\", Text.From([Índice], \"es-ES\"), \"/\", Text.From([Año], \"es-ES\")}), type text),",
        "    #\"Tipo cambiado1\" = Table.TransformColumnTypes(#\"Columna combinada insertada\",{{\"FECHA\", type date}}),",
        "    #\"Filas ordenadas\" = Table.Sort(#\"Tipo cambiado1\",{{\"Año\", Order.Ascending}})",
        "in",
        "    #\"Filas ordenadas\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Meses con Datos",
      "lineageTag": "55f7a003-e362-4407-93a1-840c3d1b305b",
      "queryGroupId": "f68b0a3d-1780-4ae2-ad40-039a03b8127b",
      "navigationStepName": "Navegación",
      "text": [
        "let",
        "    Origen = #\"Movimientos Origen\",",
        "    #\"Otras columnas quitadas\" = Table.SelectColumns(Origen,{\"FECHA\"}),",
        "    #\"Mes insertado\" = Table.AddColumn(#\"Otras columnas quitadas\", \"Mes\", each Date.Month([FECHA]), Int64.Type),",
        "    #\"Año insertado\" = Table.AddColumn(#\"Mes insertado\", \"Año\", each Date.Year([FECHA]), Int64.Type),",
        "    #\"Filas ordenadas1\" = Table.Sort(#\"Año insertado\",{{\"Año\", Order.Ascending}}),",
        "    #\"Columnas quitadas1\" = Table.RemoveColumns(#\"Filas ordenadas1\",{\"FECHA\"}),",
        "    #\"Duplicados quitados\" = Table.Distinct(#\"Columnas quitadas1\"),",
        "    #\"Filas ordenadas\" = Table.Sort(#\"Duplicados quitados\",{{\"Año\", Order.Ascending}})",
        "in",
        "    #\"Filas ordenadas\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Pagos Especie - Origen",
      "lineageTag": "ba794d35-a267-47a1-bbed-6997ebcfb890",
      "queryGroupId": "f68b0a3d-1780-4ae2-ad40-039a03b8127b",
      "navigationStepName": "Navegación",
      "text": [
        "let",
        "    Origen = Especie,",
        "    #\"Columnas quitadas\" = Table.RemoveColumns(Origen,{\"CLASIFICACION COBRO\"}),",
        "    #\"[Columna] Cantidad\" = Table.AddColumn(#\"Columnas quitadas\", \"Cantidad (€)\", each [#\"IMPORTE (€)\"], type number),",
        "    #\"Valor reemplazado\" = Table.ReplaceValue(#\"[Columna] Cantidad\",each [#\"IMPORTE (€)\"], each [#\"IMPORTE (€)\"] * -1,Replacer.ReplaceValue,{\"IMPORTE (€)\"}),",
        "    #\"Columnas con nombre cambiado\" = Table.RenameColumns(#\"Valor reemplazado\",{{\"CLASIFICACION PAGO\", \"CLASIFICACIÓN\"}})",
        "in",
        "    #\"Columnas con nombre cambiado\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Cobros Especie - Origen",
      "lineageTag": "4172a8a8-adb9-4f9e-ace5-82abb153fe48",
      "queryGroupId": "f68b0a3d-1780-4ae2-ad40-039a03b8127b",
      "navigationStepName": "Navegación",
      "text": [
        "let",
        "    Origen = Especie,",
        "    #\"Columnas quitadas\" = Table.RemoveColumns(Origen,{\"CLASIFICACION PAGO\"}),",
        "    #\"Columna duplicada\" = Table.AddColumn(#\"Columnas quitadas\", \"Cantidad (€)\", each [#\"IMPORTE (€)\"], type any),",
        "    #\"Columnas con nombre cambiado\" = Table.RenameColumns(#\"Columna duplicada\",{{\"CLASIFICACION COBRO\", \"CLASIFICACIÓN\"}}),",
        "    #\"Filas ordenadas\" = Table.Sort(#\"Columnas con nombre cambiado\",{{\"Año\", Order.Ascending}})",
        "in",
        "    #\"Filas ordenadas\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Tipo Pago Especie",
      "lineageTag": "ee3edbea-59a5-438e-84ce-dc06896643b6",
      "queryGroupId": "f68b0a3d-1780-4ae2-ad40-039a03b8127b",
      "navigationStepName": "Navegación",
      "text": [
        "let",
        "    Origen = #\"Pagos Especie - Origen\",",
        "    #\"Otras columnas quitadas\" = Table.SelectColumns(Origen,{\"CLASIFICACIÓN\", \"CATEGORÍA\"}),",
        "    #\"Duplicados quitados\" = Table.Distinct(#\"Otras columnas quitadas\"),",
        "    #\"Columna duplicada\" = Table.DuplicateColumn(#\"Duplicados quitados\", \"CATEGORÍA\", \"SUBCATEGORÍA\"),",
        "    #\"Columna duplicada1\" = Table.DuplicateColumn(#\"Columna duplicada\", \"SUBCATEGORÍA\", \"DESCRIPCIÓN\"),",
        "    #\"Personalizada agregada1\" = Table.AddColumn(#\"Columna duplicada1\", \"TIPO\", each \"Gasto\")",
        "in",
        "    #\"Personalizada agregada1\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Tipo Cobro Especie",
      "lineageTag": "96992fc9-0882-4bef-9aca-518d20b4a236",
      "queryGroupId": "f68b0a3d-1780-4ae2-ad40-039a03b8127b",
      "navigationStepName": "Navegación",
      "text": [
        "let",
        "    Origen = #\"Cobros Especie - Origen\",",
        "    #\"Otras columnas quitadas\" = Table.SelectColumns(Origen,{\"CLASIFICACIÓN\", \"CATEGORÍA\"}),",
        "    #\"Duplicados quitados\" = Table.Distinct(#\"Otras columnas quitadas\"),",
        "    #\"Columna duplicada\" = Table.DuplicateColumn(#\"Duplicados quitados\", \"CATEGORÍA\", \"SUBCATEGORÍA\"),",
        "    #\"Columna duplicada1\" = Table.DuplicateColumn(#\"Columna duplicada\", \"SUBCATEGORÍA\", \"DESCRIPCIÓN\"),",
        "    #\"Personalizada agregada1\" = Table.AddColumn(#\"Columna duplicada1\", \"TIPO\", each \"Ingreso\")",
        "in",
        "    #\"Personalizada agregada1\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Pagos Especie",
      "lineageTag": "68238d80-9f94-44d8-96ab-5b669201d1a8",
      "queryGroupId": "f68b0a3d-1780-4ae2-ad40-039a03b8127b",
      "navigationStepName": "Navegación",
      "text": [
        "let",
        "    Origen = #\"Pagos Especie - Origen\",",
        "    #\"Consultas combinadas\" = Table.NestedJoin(Origen, {\"CLASIFICACIÓN\", \"CATEGORÍA\"}, #\"Tipo Movimiento\", {\"CLASIFICACIÓN\", \"CATEGORÍA\"}, \"Tipo Movimiento\", JoinKind.LeftOuter),",
        "    #\"Se expandió Tipo Movimiento\" = Table.ExpandTableColumn(#\"Consultas combinadas\", \"Tipo Movimiento\", {\"Índice\"}, {\"Tipo Movimiento.Índice\"}),",
        "    #\"Otras columnas quitadas\" = Table.SelectColumns(#\"Se expandió Tipo Movimiento\",{\"IMPORTE (€)\", \"Cantidad (€)\", \"Tipo Movimiento.Índice\", \"FECHA\"}),",
        "    #\"Columnas reordenadas\" = Table.ReorderColumns(#\"Otras columnas quitadas\",{\"FECHA\", \"IMPORTE (€)\", \"Cantidad (€)\", \"Tipo Movimiento.Índice\"}),",
        "    #\"Tipo cambiado\" = Table.TransformColumnTypes(#\"Columnas reordenadas\",{{\"IMPORTE (€)\", Currency.Type}, {\"Cantidad (€)\", Currency.Type}})",
        "in",
        "    #\"Tipo cambiado\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Cobros Especie",
      "lineageTag": "99f11e60-4bff-4cbb-b8f6-501d7955d0b6",
      "queryGroupId": "f68b0a3d-1780-4ae2-ad40-039a03b8127b",
      "navigationStepName": "Navegación",
      "text": [
        "let",
        "    Origen = #\"Cobros Especie - Origen\",",
        "    #\"Consultas combinadas\" = Table.NestedJoin(Origen, {\"CLASIFICACIÓN\", \"CATEGORÍA\"}, #\"Tipo Movimiento\", {\"CLASIFICACIÓN\", \"CATEGORÍA\"}, \"Tipo Movimiento\", JoinKind.LeftOuter),",
        "    #\"Se expandió Tipo Movimiento\" = Table.ExpandTableColumn(#\"Consultas combinadas\", \"Tipo Movimiento\", {\"Índice\"}, {\"Tipo Movimiento.Índice\"}),",
        "    #\"Otras columnas quitadas\" = Table.SelectColumns(#\"Se expandió Tipo Movimiento\",{\"IMPORTE (€)\", \"Cantidad (€)\", \"Tipo Movimiento.Índice\", \"FECHA\"}),",
        "    #\"Columnas reordenadas\" = Table.ReorderColumns(#\"Otras columnas quitadas\",{\"FECHA\", \"IMPORTE (€)\", \"Cantidad (€)\", \"Tipo Movimiento.Índice\"}),",
        "    #\"Tipo cambiado\" = Table.TransformColumnTypes(#\"Columnas reordenadas\",{{\"IMPORTE (€)\", Currency.Type}, {\"Cantidad (€)\", Currency.Type}})",
        "in",
        "    #\"Tipo cambiado\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Movimientos Origen",
      "lineageTag": "d278a3d9-9f0c-400a-933c-08efa0a36b69",
      "queryGroupId": "f68b0a3d-1780-4ae2-ad40-039a03b8127b",
      "navigationStepName": "Navegación",
      "text": [
        "let",
        "    Origen = #\"Origen Data File\",",
        "    T_Movimientos_Table = Origen{[Item=\"T_Movimientos\",Kind=\"Table\"]}[Data]",
        "in",
        "    T_Movimientos_Table"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Transacciones",
      "lineageTag": "c1c9e7c5-0686-4cc6-aa8e-71faa3fa78dc",
      "queryGroupId": "3c6be78f-01f8-44b2-9b46-61c4ac6f0621",
      "navigationStepName": "Navegación",
      "text": [
        "/*let",
        "    Origen = Excel.Workbook(File.Contents(Path), null, true),",
        "    T_Saldo_Table = Origen{[Item=\"T_Inversion\",Kind=\"Table\"]}[Data],",
        "    #\"Columnas con nombre cambiado1\" = Table.RenameColumns(T_Saldo_Table,{{\"Importe Bruto\", \"Importe\"}}),",
        "    #\"[Tipos][Update]\" = Table.TransformColumnTypes(#\"Columnas con nombre cambiado1\",{{\"Producto\", type text}, {\"Participaciones\", type number}, {\"Precio Participación\", type number}, {\"Importe\", type number}, {\"Fecha\", type date}, {\"Comisión\", type number}, {\"Retenido\", type number}, {\"Cuenta Producto\", type text}, {\"Año IRPF\", Int64.Type}, {\"Tipo Transacción\", type text}, {\"Producto Contraparte\", type text}, {\"Cuenta Contraparte\", type text}}),",
        "    #\"[Update] Comision - Null to 0\" = Table.ReplaceValue(#\"[Tipos][Update]\",null,0,Replacer.ReplaceValue,{\"Comisión\"}),",
        "    #\"[Columna][Add] Total\" = Table.AddColumn(#\"[Update] Comision - Null to 0\", \"Total Bruto\", each [Importe] + [Comisión], type number),",
        "    #\"[Columna][Add] Año IRPF Fijado\" = Table.AddColumn(#\"[Columna][Add] Total\", \"Año IRPF Fijado\", each if [Año IRPF] = null then false else true, type logical),",
        "    #\"[Modify] Año IRPF\" = Table.ReplaceValue(#\"[Columna][Add] Año IRPF Fijado\",null, each if [Tipo Transacción] = \"Compra\" then null else List.Max({Date.Year([Fecha]), Date.Year(DateTime.LocalNow()) - 1}),Replacer.ReplaceValue,{\"Año IRPF\"}),",
        "    #\"[Tipo] Año a Integer\" = Table.TransformColumnTypes(#\"[Modify] Año IRPF\",{{\"Año IRPF\", Int64.Type}}),",
        "    #\"Filas ordenadas\" = Table.Sort(#\"[Tipo] Año a Integer\",{{\"Producto\", Order.Ascending},{\"Fecha\", Order.Ascending}}),",
        "    Buffer = Table.Buffer(#\"Filas ordenadas\"),",
        "    #\"Índice agregado\" = Table.AddIndexColumn(Buffer, \"Transacción ID\", 1, 1, Int64.Type),",
        "    ListaRegistros = Table.ToRecords(#\"Índice agregado\"),",
        "",
        "    ListaAcumulada =",
        "        List.Accumulate(",
        "            ListaRegistros,",
        "            // Estado inicial",
        "            [",
        "                ParticipacionesAcum = 0,",
        "                PrecioMedio = 0,",
        "                ProductoActual = \"\",",
        "                RegistrosResultado = {}",
        "            ],",
        "            // Función de acumulación",
        "            (estadoAnterior, registroActual) =>",
        "            let                ",
        "                tipo = registroActual[Tipo Transacción],",
        "                anteriorProducto = estadoAnterior[ProductoActual],",
        "                actualProducto = registroActual[Producto],",
        "                anteriorPart = if actualProducto <> anteriorProducto then 0 else estadoAnterior[ParticipacionesAcum],",
        "                actualPart = registroActual[Participaciones],",
        "                anteriorPrecio = if actualProducto <> anteriorProducto then 0 else estadoAnterior[PrecioMedio],                ",
        "                actualCoste = registroActual[Total Bruto],",
        "                ",
        "                ",
        "                // Calculamos los nuevos valores según la transacción actual",
        "                nuevasPart = if List.Contains({\"Compra\", \"Venta\"},tipo) then anteriorPart + registroActual[Participaciones] else anteriorPart,",
        "                nuevoPrecioMedio = if tipo = \"Compra\" then ((anteriorPart * anteriorPrecio) + actualCoste) / nuevasPart else anteriorPrecio,                ",
        "",
        "                // Generamos un registro que incluye datos originales y los acumulados",
        "                registroExtendido = Record.Combine(",
        "                    {",
        "                        registroActual,",
        "                        [",
        "                            ParticipacionesAcum = nuevasPart,",
        "                            PrecioMedio = nuevoPrecioMedio                     ",
        "                        ]",
        "                    }",
        "                ),",
        "                // Anexamos ese registro al historial",
        "                estadoSiguiente = [",
        "                    ParticipacionesAcum = nuevasPart,",
        "                    PrecioMedio = nuevoPrecioMedio,",
        "                    ProductoActual = actualProducto,",
        "                    RegistrosResultado = estadoAnterior[RegistrosResultado] & { registroExtendido }",
        "                ]",
        "            in",
        "                estadoSiguiente",
        "        ),",
        "",
        "    // Extraer la lista final de registros \"extendidos\"",
        "    ResultadoRegistros = ListaAcumulada[RegistrosResultado],",
        "",
        "    // Convertir de nuevo a tabla",
        "    TablaResultado = Table.FromRecords(ResultadoRegistros),",
        "    #\"[Tipos][Update] Refresh\" = Table.TransformColumnTypes(TablaResultado,{{\"Fecha\", type date}, {\"Producto\", type text}, {\"Cuenta Producto\", type text}, {\"Tipo Transacción\", type text}, {\"Participaciones\", type number}, {\"Precio Participación\", type number}, {\"Total Bruto\", type number}, {\"Retenido\", type number}, {\"Año IRPF\", Int64.Type}, {\"Comisión\", Int64.Type}, {\"Transacción ID\", Int64.Type}, {\"Año IRPF Fijado\", type logical}, {\"ParticipacionesAcum\", type number}, {\"PrecioMedio\", type number}, {\"Importe\", type number}, {\"Producto Contraparte\", type text}, {\"Cuenta Contraparte\", type text}}),",
        "    #\"Columnas con nombre cambiado\" = Table.RenameColumns(#\"[Tipos][Update] Refresh\",{{\"ParticipacionesAcum\", \"Participaciones Acumuladas\"}, {\"PrecioMedio\", \"Precio Medio Hasta Transacción\"}}),",
        "    #\"[Columna][Add] Renta Obtenida\" = Table.AddColumn(#\"Columnas con nombre cambiado\", \"Renta Bruta Obtenida\", each if List.Contains({\"Compra\",\"Venta\"},[Tipo Transacción]) then -1*[Total Bruto] else [Total Bruto], type number),",
        "",
        "    // Crear la transacción espejo invirtiendo el tipo de transacción y cambiando Origen/Destino ↔ Producto, Cuenta ↔ Cuenta Origen/Destino",
        "    #\"Transaccion Espejo\" = Table.TransformColumns(",
        "        #\"[Columna][Add] Renta Obtenida\",",
        "        {",
        "            {\"Tipo Transacción\", each if _ = \"Compra\" then \"Venta\" else \"Compra\"},  // Invertir Compra/Venta",
        "            {\"Producto Contraparte\", each [Producto]},  // Intercambiar con \"Producto\"",
        "            {\"Producto\", each [Producto Contraparte]},  // Intercambiar con \"Origen/Destino\"",
        "            {\"Cuenta Producto\", each [Cuenta Contraparte]},  // Intercambiar cuentas",
        "            {\"Cuenta Contraparte\", each [Cuenta Producto]}   // Intercambiar cuentas",
        "        }",
        "    )",
        "in",
        "    #\"[Columna][Add] Renta Obtenida\"*/",
        "",
        "let",
        "    Origen = #\"Origen Data File\",",
        "    T_Saldo_Table = Origen{[Item=\"T_Transacciones\",Kind=\"Table\"]}[Data],",
        "    #\"[Update] Comision - Null to 0\" = Table.ReplaceValue(T_Saldo_Table,null,0,Replacer.ReplaceValue,{\"Comisión\"}),",
        "    #\"Columnas con nombre cambiado1\" = Table.RenameColumns(#\"[Update] Comision - Null to 0\",{{\"Importe Bruto\", \"Importe\"}}),",
        "    #\"[Tipos][Update]\" = Table.TransformColumnTypes(#\"Columnas con nombre cambiado1\",{{\"Producto\", type text}, {\"Participaciones\", Currency.Type}, {\"Precio Participación\", Currency.Type}, {\"Importe\", Currency.Type}, {\"Fecha\", type date}, {\"Comisión\", Currency.Type}, {\"Retenido\", Currency.Type}, {\"Cuenta Producto\", type text}, {\"Año IRPF\", Int64.Type}, {\"Tipo Transacción\", type text}, {\"Producto Contraparte\", type text}, {\"Cuenta Contraparte\", type text}, {\"Precio (Moneda Transacción)\", Currency.Type}, {\"Cambio\", Currency.Type}, {\"Importe Bruto (Moneda Transacción)\", Currency.Type}, {\"Retenido (Moneda Transacción)\", Currency.Type}, {\"Comisión (Moneda Transacción)\", Currency.Type}}),",
        "    #\"Transaccion Espejo\" = Table.RenameColumns(",
        "        #\"[Tipos][Update]\",",
        "        {",
        "            {\"Producto\", \"Producto Contraparte\"},  // Renombramos \"Producto\" temporalmente",
        "            {\"Producto Contraparte\", \"Producto\"},  // Renombramos \"Producto Contraparte\" a \"Producto\"",
        "            {\"Cuenta Producto\", \"Cuenta Contraparte\"},  // Renombramos \"Cuenta Producto\" temporalmente",
        "            {\"Cuenta Contraparte\", \"Cuenta Producto\"}  // Renombramos \"Cuenta Contraparte\" a \"Cuenta Producto\"",
        "        }),",
        "    #\"[Update] Importe Con comisión\" = Table.AddColumn(#\"Transaccion Espejo\", \"Importe Con Comisión\", each [Importe] + [Comisión]),",
        "    #\"[Update] Eliminado Importe Antiguo\" = Table.RemoveColumns(#\"[Update] Importe Con comisión\",{\"Importe\"}),",
        "    #\"[Update] Importe Nuevo\" = Table.RenameColumns(#\"[Update] Eliminado Importe Antiguo\",{{\"Importe Con Comisión\", \"Importe\"}}),",
        "    #\"[Filtro] Eliminar dividendos de Espejo\" = Table.SelectRows(#\"[Update] Importe Nuevo\", each ([Tipo Transacción] <> \"Dividendos\")),",
        "    ",
        "    #\"[Limpiar] Transacción Espejo\" = Table.TransformColumns(",
        "    #\"[Filtro] Eliminar dividendos de Espejo\",",
        "    {",
        "        {\"Tipo Transacción\", each if _ = \"Compra\" then \"Venta\" else \"Compra\"},  // Invertir Compra/Venta,",
        "        {\"Importe\", each _ * -1},",
        "        {\"Participaciones\", each null},  ",
        "        {\"Precio Participación\", each null}, ",
        "        {\"Precio (Moneda Transacción)\", each null},  ",
        "        {\"Retenido\", each null},",
        "        {\"Retenido (Moneda Transacción)\", each null},",
        "        {\"Año IRPF\", each null},",
        "        {\"Comisión\", each null},",
        "        {\"Comisión (Moneda Transacción)\", each null}",
        "    }",
        "),",
        "    #\"[Anexion] Espejo\" = Table.Combine({#\"[Tipos][Update]\", #\"[Limpiar] Transacción Espejo\"}),",
        "    #\"Duplicados quitados\" = Table.Distinct(#\"[Anexion] Espejo\", {\"Producto\", \"Fecha\", \"Hora\", \"Producto Contraparte\", \"Importe\"}),",
        "    #\"[Columna][Add] Total\" = Table.AddColumn(#\"Duplicados quitados\", \"Total Bruto\", each [Importe] + [Comisión], type number),",
        "    #\"[Columna][Add] Año IRPF Fijado\" = Table.AddColumn(#\"[Columna][Add] Total\", \"Año IRPF Fijado\", each if [Año IRPF] = null then false else true, type logical),",
        "    #\"[Modify] Año IRPF\" = Table.ReplaceValue(#\"[Columna][Add] Año IRPF Fijado\",null, each if [Tipo Transacción] = \"Compra\" then null else List.Max({Date.Year([Fecha]), Date.Year(DateTime.LocalNow()) - 1}),Replacer.ReplaceValue,{\"Año IRPF\"}),",
        "    #\"[Tipo] Año a Integer\" = Table.TransformColumnTypes(#\"[Modify] Año IRPF\",{{\"Año IRPF\", Int64.Type}}),",
        "    #\"Filas ordenadas\" = Table.Sort(#\"[Tipo] Año a Integer\",{{\"Producto\", Order.Ascending},{\"Fecha\", Order.Ascending}}),",
        "    Buffer = Table.Buffer(#\"Filas ordenadas\"),",
        "    #\"Índice agregado\" = Table.AddIndexColumn(Buffer, \"ID\", 1, 1, Int64.Type),",
        "    ListaRegistros = Table.ToRecords(#\"Índice agregado\"),",
        "        ListaAcumulada =",
        "        List.Accumulate(",
        "            ListaRegistros,",
        "            // Estado inicial",
        "            [",
        "                ParticipacionesAcum = 0,",
        "                PrecioMedio = 0,",
        "                ProductoActual = \"\",",
        "                RegistrosResultado = {}",
        "            ],",
        "            // Función de acumulación",
        "            (estadoAnterior, registroActual) =>",
        "            let                ",
        "                tipo = registroActual[Tipo Transacción],",
        "                anteriorProducto = estadoAnterior[ProductoActual],",
        "                actualProducto = registroActual[Producto],",
        "                anteriorPart = if actualProducto <> anteriorProducto then 0 else estadoAnterior[ParticipacionesAcum],",
        "                actualPart = registroActual[Participaciones],",
        "                anteriorPrecio = if actualProducto <> anteriorProducto then 0 else estadoAnterior[PrecioMedio],                ",
        "                actualCoste = registroActual[Total Bruto],",
        "                ",
        "                ",
        "                // Calculamos los nuevos valores según la transacción actual",
        "                nuevasPart = if List.Contains({\"Compra\", \"Venta\"},tipo) then anteriorPart + registroActual[Participaciones] else anteriorPart,",
        "                nuevoPrecioMedio = if tipo = \"Compra\" then ((anteriorPart * anteriorPrecio) + actualCoste) / nuevasPart else anteriorPrecio,                ",
        "",
        "                // Generamos un registro que incluye datos originales y los acumulados",
        "                registroExtendido = Record.Combine(",
        "                    {",
        "                        registroActual,",
        "                        [",
        "                            ParticipacionesAcum = nuevasPart,",
        "                            PrecioMedio = nuevoPrecioMedio                     ",
        "                        ]",
        "                    }",
        "                ),",
        "                // Anexamos ese registro al historial",
        "                estadoSiguiente = [",
        "                    ParticipacionesAcum = nuevasPart,",
        "                    PrecioMedio = nuevoPrecioMedio,",
        "                    ProductoActual = actualProducto,",
        "                    RegistrosResultado = estadoAnterior[RegistrosResultado] & { registroExtendido }",
        "                ]",
        "            in",
        "                estadoSiguiente",
        "        ),",
        "",
        "    // Extraer la lista final de registros \"extendidos\"",
        "    ResultadoRegistros = ListaAcumulada[RegistrosResultado],",
        "",
        "    // Convertir de nuevo a tabla",
        "    TablaResultado = Table.FromRecords(ResultadoRegistros),",
        "    #\"[Tipos][Update] Refresh\" = Table.TransformColumnTypes(TablaResultado,{{\"Fecha\", type date}, {\"Producto\", type text}, {\"Cuenta Producto\", type text}, {\"Tipo Transacción\", type text}, {\"Participaciones\", Currency.Type}, {\"Precio Participación\", Currency.Type}, {\"Total Bruto\", type number}, {\"Retenido\", Currency.Type}, {\"Año IRPF\", Int64.Type}, {\"Comisión\", Currency.Type}, {\"Año IRPF Fijado\", type logical}, {\"ParticipacionesAcum\", type number}, {\"PrecioMedio\", type number}, {\"Importe\", Currency.Type}, {\"Producto Contraparte\", type text}, {\"Cuenta Contraparte\", type text}, {\"ID\", Int64.Type}, {\"Comisión (Moneda Transacción)\", Currency.Type}, {\"Retenido (Moneda Transacción)\", Currency.Type}, {\"Importe Bruto (Moneda Transacción)\", Currency.Type}, {\"Cambio\", Currency.Type}, {\"Precio (Moneda Transacción)\", Currency.Type}, {\"Hora\", type time}}),",
        "    #\"Columnas con nombre cambiado\" = Table.RenameColumns(#\"[Tipos][Update] Refresh\",{{\"ParticipacionesAcum\", \"Participaciones Acumuladas\"}, {\"PrecioMedio\", \"Precio Medio Hasta Transacción\"}}),",
        "    #\"[Columna][Add] Renta Obtenida\" = Table.AddColumn(#\"Columnas con nombre cambiado\", \"Renta Bruta Obtenida\", each if List.Contains({\"Compra\",\"Venta\"},[Tipo Transacción]) then -1*[Total Bruto] else [Total Bruto], type number)",
        "in",
        "    #\"[Columna][Add] Renta Obtenida\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"/*let\\n    Origen = Excel.Workbook(File.Contents(Path), null, true),\\n    T_Saldo_Table = Origen{[Item=\\\"T_Inversion\\\",Kind=\\\"Table\\\"]}[Data],\\n    #\\\"Columnas con nombre cambiado1\\\" = Table.RenameColumns(T_Saldo_Table,{{\\\"Importe Bruto\\\", \\\"Importe\\\"}}),\\n    #\\\"[Tipos][Update]\\\" = Table.TransformColumnTypes(#\\\"Columnas con nombre cambiado1\\\",{{\\\"Producto\\\", type text}, {\\\"Participaciones\\\", type number}, {\\\"Precio Participación\\\", type number}, {\\\"Importe\\\", type number}, {\\\"Fecha\\\", type date}, {\\\"Comisión\\\", type number}, {\\\"Retenido\\\", type number}, {\\\"Cuenta Producto\\\", type text}, {\\\"Año IRPF\\\", Int64.Type}, {\\\"Tipo Transacción\\\", type text}, {\\\"Producto Contraparte\\\", type text}, {\\\"Cuenta Contraparte\\\", type text}}),\\n    #\\\"[Update] Comision - Null to 0\\\" = Table.ReplaceValue(#\\\"[Tipos][Update]\\\",null,0,Replacer.ReplaceValue,{\\\"Comisión\\\"}),\\n    #\\\"[Columna][Add] Total\\\" = Table.AddColumn(#\\\"[Update] Comision - Null to 0\\\", \\\"Total Bruto\\\", each [Importe] + [Comisión], type number),\\n    #\\\"[Columna][Add] Año IRPF Fijado\\\" = Table.AddColumn(#\\\"[Columna][Add] Total\\\", \\\"Año IRPF Fijado\\\", each if [Año IRPF] = null then false else true, type logical),\\n    #\\\"[Modify] Año IRPF\\\" = Table.ReplaceValue(#\\\"[Columna][Add] Año IRPF Fijado\\\",null, each if [Tipo Transacción] = \\\"Compra\\\" then null else List.Max({Date.Year([Fecha]), Date.Year(DateTime.LocalNow()) - 1}),Replacer.ReplaceValue,{\\\"Año IRPF\\\"}),\\n    #\\\"[Tipo] Año a Integer\\\" = Table.TransformColumnTypes(#\\\"[Modify] Año IRPF\\\",{{\\\"Año IRPF\\\", Int64.Type}}),\\n    #\\\"Filas ordenadas\\\" = Table.Sort(#\\\"[Tipo] Año a Integer\\\",{{\\\"Producto\\\", Order.Ascending},{\\\"Fecha\\\", Order.Ascending}}),\\n    Buffer = Table.Buffer(#\\\"Filas ordenadas\\\"),\\n    #\\\"Índice agregado\\\" = Table.AddIndexColumn(Buffer, \\\"Transacción ID\\\", 1, 1, Int64.Type),\\n    ListaRegistros = Table.ToRecords(#\\\"Índice agregado\\\"),\\n\\n    ListaAcumulada =\\n        List.Accumulate(\\n            ListaRegistros,\\n            // Estado inicial\\n            [\\n                ParticipacionesAcum = 0,\\n                PrecioMedio = 0,\\n                ProductoActual = \\\"\\\",\\n                RegistrosResultado = {}\\n            ],\\n            // Función de acumulación\\n            (estadoAnterior, registroActual) =>\\n            let                \\n                tipo = registroActual[Tipo Transacción],\\n                anteriorProducto = estadoAnterior[ProductoActual],\\n                actualProducto = registroActual[Producto],\\n                anteriorPart = if actualProducto <> anteriorProducto then 0 else estadoAnterior[ParticipacionesAcum],\\n                actualPart = registroActual[Participaciones],\\n                anteriorPrecio = if actualProducto <> anteriorProducto then 0 else estadoAnterior[PrecioMedio],                \\n                actualCoste = registroActual[Total Bruto],\\n                \\n                \\n                // Calculamos los nuevos valores según la transacción actual\\n                nuevasPart = if List.Contains({\\\"Compra\\\", \\\"Venta\\\"},tipo) then anteriorPart + registroActual[Participaciones] else anteriorPart,\\n                nuevoPrecioMedio = if tipo = \\\"Compra\\\" then ((anteriorPart * anteriorPrecio) + actualCoste) / nuevasPart else anteriorPrecio,                \\n\\n                // Generamos un registro que incluye datos originales y los acumulados\\n                registroExtendido = Record.Combine(\\n                    {\\n                        registroActual,\\n                        [\\n                            ParticipacionesAcum = nuevasPart,\\n                            PrecioMedio = nuevoPrecioMedio                     \\n                        ]\\n                    }\\n                ),\\n                // Anexamos ese registro al historial\\n                estadoSiguiente = [\\n                    ParticipacionesAcum = nuevasPart,\\n                    PrecioMedio = nuevoPrecioMedio,\\n                    ProductoActual = actualProducto,\\n                    RegistrosResultado = estadoAnterior[RegistrosResultado] & { registroExtendido }\\n                ]\\n            in\\n                estadoSiguiente\\n        ),\\n\\n    // Extraer la lista final de registros \\\"extendidos\\\"\\n    ResultadoRegistros = ListaAcumulada[RegistrosResultado],\\n\\n    // Convertir de nuevo a tabla\\n    TablaResultado = Table.FromRecords(ResultadoRegistros),\\n    #\\\"[Tipos][Update] Refresh\\\" = Table.TransformColumnTypes(TablaResultado,{{\\\"Fecha\\\", type date}, {\\\"Producto\\\", type text}, {\\\"Cuenta Producto\\\", type text}, {\\\"Tipo Transacción\\\", type text}, {\\\"Participaciones\\\", type number}, {\\\"Precio Participación\\\", type number}, {\\\"Total Bruto\\\", type number}, {\\\"Retenido\\\", type number}, {\\\"Año IRPF\\\", Int64.Type}, {\\\"Comisión\\\", Int64.Type}, {\\\"Transacción ID\\\", Int64.Type}, {\\\"Año IRPF Fijado\\\", type logical}, {\\\"ParticipacionesAcum\\\", type number}, {\\\"PrecioMedio\\\", type number}, {\\\"Importe\\\", type number}, {\\\"Producto Contraparte\\\", type text}, {\\\"Cuenta Contraparte\\\", type text}}),\\n    #\\\"Columnas con nombre cambiado\\\" = Table.RenameColumns(#\\\"[Tipos][Update] Refresh\\\",{{\\\"ParticipacionesAcum\\\", \\\"Participaciones Acumuladas\\\"}, {\\\"PrecioMedio\\\", \\\"Precio Medio Hasta Transacción\\\"}}),\\n    #\\\"[Columna][Add] Renta Obtenida\\\" = Table.AddColumn(#\\\"Columnas con nombre cambiado\\\", \\\"Renta Bruta Obtenida\\\", each if List.Contains({\\\"Compra\\\",\\\"Venta\\\"},[Tipo Transacción]) then -1*[Total Bruto] else [Total Bruto], type number),\\n\\n    // Crear la transacción espejo invirtiendo el tipo de transacción y cambiando Origen/Destino ↔ Producto, Cuenta ↔ Cuenta Origen/Destino\\n    #\\\"Transaccion Espejo\\\" = Table.TransformColumns(\\n        #\\\"[Columna][Add] Renta Obtenida\\\",\\n        {\\n            {\\\"Tipo Transacción\\\", each if _ = \\\"Compra\\\" then \\\"Venta\\\" else \\\"Compra\\\"},  // Invertir Compra/Venta\\n            {\\\"Producto Contraparte\\\", each [Producto]},  // Intercambiar con \\\"Producto\\\"\\n            {\\\"Producto\\\", each [Producto Contraparte]},  // Intercambiar con \\\"Origen/Destino\\\"\\n            {\\\"Cuenta Producto\\\", each [Cuenta Contraparte]},  // Intercambiar cuentas\\n            {\\\"Cuenta Contraparte\\\", each [Cuenta Producto]}   // Intercambiar cuentas\\n        }\\n    )\\nin\\n    #\\\"[Columna][Add] Renta Obtenida\\\"*/\\n\\nlet\\n    Origen = Excel.Workbook(File.Contents(Path), null, true),\\n    T_Saldo_Table = Origen{[Item=\\\"T_Inversion\\\",Kind=\\\"Table\\\"]}[Data],\\n    #\\\"[Update] Comision - Null to 0\\\" = Table.ReplaceValue(T_Saldo_Table,null,0,Replacer.ReplaceValue,{\\\"Comisión\\\"}),\\n    #\\\"Columnas con nombre cambiado1\\\" = Table.RenameColumns(#\\\"[Update] Comision - Null to 0\\\",{{\\\"Importe Bruto\\\", \\\"Importe\\\"}}),\\n    #\\\"[Tipos][Update]\\\" = Table.TransformColumnTypes(#\\\"Columnas con nombre cambiado1\\\",{{\\\"Producto\\\", type text}, {\\\"Participaciones\\\", Currency.Type}, {\\\"Precio Participación\\\", Currency.Type}, {\\\"Importe\\\", Currency.Type}, {\\\"Fecha\\\", type date}, {\\\"Comisión\\\", Currency.Type}, {\\\"Retenido\\\", Currency.Type}, {\\\"Cuenta Producto\\\", type text}, {\\\"Año IRPF\\\", Int64.Type}, {\\\"Tipo Transacción\\\", type text}, {\\\"Producto Contraparte\\\", type text}, {\\\"Cuenta Contraparte\\\", type text}, {\\\"Orden\\\", Int64.Type}, {\\\"Transacción ID\\\", type text}, {\\\"Precio (Moneda Transacción)\\\", Currency.Type}, {\\\"Cambio\\\", Currency.Type}, {\\\"Importe Bruto (Moneda Transacción)\\\", Currency.Type}, {\\\"Retenido (Moneda Transacción)\\\", Currency.Type}, {\\\"Comisión (Moneda Transacción)\\\", Currency.Type}}),\\n    #\\\"Transaccion Espejo\\\" = Table.RenameColumns(\\n        #\\\"[Tipos][Update]\\\",\\n        {\\n            {\\\"Producto\\\", \\\"Producto Contraparte\\\"},  // Renombramos \\\"Producto\\\" temporalmente\\n            {\\\"Producto Contraparte\\\", \\\"Producto\\\"},  // Renombramos \\\"Producto Contraparte\\\" a \\\"Producto\\\"\\n            {\\\"Cuenta Producto\\\", \\\"Cuenta Contraparte\\\"},  // Renombramos \\\"Cuenta Producto\\\" temporalmente\\n            {\\\"Cuenta Contraparte\\\", \\\"Cuenta Producto\\\"}  // Renombramos \\\"Cuenta Contraparte\\\" a \\\"Cuenta Producto\\\"\\n        }),\\n    #\\\"[Update] Importe Con comisión\\\" = Table.AddColumn(#\\\"Transaccion Espejo\\\", \\\"Importe Con Comisión\\\", each [Importe] + [Comisión]),\\n    #\\\"[Update] Eliminado Importe Antiguo\\\" = Table.RemoveColumns(#\\\"[Update] Importe Con comisión\\\",{\\\"Importe\\\"}),\\n    #\\\"[Update] Importe Nuevo\\\" = Table.RenameColumns(#\\\"[Update] Eliminado Importe Antiguo\\\",{{\\\"Importe Con Comisión\\\", \\\"Importe\\\"}}),\\n    #\\\"[Filtro] Eliminar dividendos de Espejo\\\" = Table.SelectRows(#\\\"[Update] Importe Nuevo\\\", each ([Tipo Transacción] <> \\\"Dividendos\\\")),\\n    \\n    #\\\"[Limpiar] Transacción Espejo\\\" = Table.TransformColumns(\\n    #\\\"[Filtro] Eliminar dividendos de Espejo\\\",\\n    {\\n        {\\\"Tipo Transacción\\\", each if _ = \\\"Compra\\\" then \\\"Venta\\\" else \\\"Compra\\\"},  // Invertir Compra/Venta,\\n        {\\\"Importe\\\", each _ * -1},\\n        {\\\"Participaciones\\\", each null},  \\n        {\\\"Precio Participación\\\", each null}, \\n        {\\\"Precio (Moneda Transacción)\\\", each null},  \\n        {\\\"Retenido\\\", each null},\\n        {\\\"Retenido (Moneda Transacción)\\\", each null},\\n        {\\\"Año IRPF\\\", each null},\\n        {\\\"Comisión\\\", each null},\\n        {\\\"Comisión (Moneda Transacción)\\\", each null}\\n    }\\n),\\n    #\\\"[Anexion] Espejo\\\" = Table.Combine({#\\\"[Tipos][Update]\\\", #\\\"[Limpiar] Transacción Espejo\\\"}),\\n    #\\\"Duplicados quitados\\\" = Table.Distinct(#\\\"[Anexion] Espejo\\\", {\\\"Transacción ID\\\", \\\"Producto\\\", \\\"Fecha\\\", \\\"Orden\\\", \\\"Producto Contraparte\\\", \\\"Importe\\\"}),\\n    #\\\"[Columna][Add] Total\\\" = Table.AddColumn(#\\\"Duplicados quitados\\\", \\\"Total Bruto\\\", each [Importe] + [Comisión], type number),\\n    #\\\"[Columna][Add] Año IRPF Fijado\\\" = Table.AddColumn(#\\\"[Columna][Add] Total\\\", \\\"Año IRPF Fijado\\\", each if [Año IRPF] = null then false else true, type logical),\\n    #\\\"[Modify] Año IRPF\\\" = Table.ReplaceValue(#\\\"[Columna][Add] Año IRPF Fijado\\\",null, each if [Tipo Transacción] = \\\"Compra\\\" then null else List.Max({Date.Year([Fecha]), Date.Year(DateTime.LocalNow()) - 1}),Replacer.ReplaceValue,{\\\"Año IRPF\\\"}),\\n    #\\\"[Tipo] Año a Integer\\\" = Table.TransformColumnTypes(#\\\"[Modify] Año IRPF\\\",{{\\\"Año IRPF\\\", Int64.Type}}),\\n    #\\\"Filas ordenadas\\\" = Table.Sort(#\\\"[Tipo] Año a Integer\\\",{{\\\"Producto\\\", Order.Ascending},{\\\"Fecha\\\", Order.Ascending}}),\\n    Buffer = Table.Buffer(#\\\"Filas ordenadas\\\"),\\n    #\\\"Índice agregado\\\" = Table.AddIndexColumn(Buffer, \\\"ID\\\", 1, 1, Int64.Type),\\n    ListaRegistros = Table.ToRecords(#\\\"Índice agregado\\\"),\\n        ListaAcumulada =\\n        List.Accumulate(\\n            ListaRegistros,\\n            // Estado inicial\\n            [\\n                ParticipacionesAcum = 0,\\n                PrecioMedio = 0,\\n                ProductoActual = \\\"\\\",\\n                RegistrosResultado = {}\\n            ],\\n            // Función de acumulación\\n            (estadoAnterior, registroActual) =>\\n            let                \\n                tipo = registroActual[Tipo Transacción],\\n                anteriorProducto = estadoAnterior[ProductoActual],\\n                actualProducto = registroActual[Producto],\\n                anteriorPart = if actualProducto <> anteriorProducto then 0 else estadoAnterior[ParticipacionesAcum],\\n                actualPart = registroActual[Participaciones],\\n                anteriorPrecio = if actualProducto <> anteriorProducto then 0 else estadoAnterior[PrecioMedio],                \\n                actualCoste = registroActual[Total Bruto],\\n                \\n                \\n                // Calculamos los nuevos valores según la transacción actual\\n                nuevasPart = if List.Contains({\\\"Compra\\\", \\\"Venta\\\"},tipo) then anteriorPart + registroActual[Participaciones] else anteriorPart,\\n                nuevoPrecioMedio = if tipo = \\\"Compra\\\" then ((anteriorPart * anteriorPrecio) + actualCoste) / nuevasPart else anteriorPrecio,                \\n\\n                // Generamos un registro que incluye datos originales y los acumulados\\n                registroExtendido = Record.Combine(\\n                    {\\n                        registroActual,\\n                        [\\n                            ParticipacionesAcum = nuevasPart,\\n                            PrecioMedio = nuevoPrecioMedio                     \\n                        ]\\n                    }\\n                ),\\n                // Anexamos ese registro al historial\\n                estadoSiguiente = [\\n                    ParticipacionesAcum = nuevasPart,\\n                    PrecioMedio = nuevoPrecioMedio,\\n                    ProductoActual = actualProducto,\\n                    RegistrosResultado = estadoAnterior[RegistrosResultado] & { registroExtendido }\\n                ]\\n            in\\n                estadoSiguiente\\n        ),\\n\\n    // Extraer la lista final de registros \\\"extendidos\\\"\\n    ResultadoRegistros = ListaAcumulada[RegistrosResultado],\\n\\n    // Convertir de nuevo a tabla\\n    TablaResultado = Table.FromRecords(ResultadoRegistros),\\n    #\\\"[Tipos][Update] Refresh\\\" = Table.TransformColumnTypes(TablaResultado,{{\\\"Fecha\\\", type date}, {\\\"Producto\\\", type text}, {\\\"Cuenta Producto\\\", type text}, {\\\"Tipo Transacción\\\", type text}, {\\\"Participaciones\\\", Currency.Type}, {\\\"Precio Participación\\\", Currency.Type}, {\\\"Total Bruto\\\", type number}, {\\\"Retenido\\\", Currency.Type}, {\\\"Año IRPF\\\", Int64.Type}, {\\\"Comisión\\\", Currency.Type}, {\\\"Transacción ID\\\", type text}, {\\\"Año IRPF Fijado\\\", type logical}, {\\\"ParticipacionesAcum\\\", type number}, {\\\"PrecioMedio\\\", type number}, {\\\"Importe\\\", Currency.Type}, {\\\"Producto Contraparte\\\", type text}, {\\\"Cuenta Contraparte\\\", type text}, {\\\"ID\\\", Int64.Type}, {\\\"Comisión (Moneda Transacción)\\\", Currency.Type}, {\\\"Retenido (Moneda Transacción)\\\", Currency.Type}, {\\\"Importe Bruto (Moneda Transacción)\\\", Currency.Type}, {\\\"Cambio\\\", Currency.Type}, {\\\"Precio (Moneda Transacción)\\\", Currency.Type}, {\\\"Orden\\\", Int64.Type}, {\\\"Hora\\\", type time}}),\\n    #\\\"Columnas con nombre cambiado\\\" = Table.RenameColumns(#\\\"[Tipos][Update] Refresh\\\",{{\\\"ParticipacionesAcum\\\", \\\"Participaciones Acumuladas\\\"}, {\\\"PrecioMedio\\\", \\\"Precio Medio Hasta Transacción\\\"}}),\\n    #\\\"[Columna][Add] Renta Obtenida\\\" = Table.AddColumn(#\\\"Columnas con nombre cambiado\\\", \\\"Renta Bruta Obtenida\\\", each if List.Contains({\\\"Compra\\\",\\\"Venta\\\"},[Tipo Transacción]) then -1*[Total Bruto] else [Total Bruto], type number)\\nin\\n    #\\\"[Columna][Add] Renta Obtenida\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Exception",
      "isHidden": false
    },
    {
      "name": "Transacciones Agrupadas",
      "lineageTag": "01c2a73d-f2d5-4d85-9e73-4b818a36bdfc",
      "queryGroupId": "3c6be78f-01f8-44b2-9b46-61c4ac6f0621",
      "navigationStepName": "Navegación",
      "text": [
        "let",
        "    Origen = Transacciones,",
        "    #\"Filas filtradas\" = Table.SelectRows(Origen, each (List.Contains({\"Compra\",\"Venta\"}, [Tipo Transacción]))),",
        "    #\"Filas ordenadas\" = Table.Sort(#\"Filas filtradas\",{{\"ID\", Order.Descending}}),",
        "    Buffer = Table.Buffer(#\"Filas ordenadas\"),",
        "    #\"Otras columnas quitadas\" = Table.SelectColumns(Buffer,{\"Fecha\", \"Producto\", \"Precio Participación\", \"Importe\", \"Participaciones Acumuladas\"}),",
        "    #\"Duplicados quitados\" = Table.Distinct(#\"Otras columnas quitadas\", {\"Fecha\", \"Producto\"}),",
        "    #\"Columnas con nombre cambiado\" = Table.RenameColumns(#\"Duplicados quitados\",{{\"Participaciones Acumuladas\", \"Participaciones\"}, {\"Precio Participación\", \"Valor liquidativo\"}}),",
        "    #\"Personalizada agregada\" = Table.AddColumn(#\"Columnas con nombre cambiado\", \"Saldo\", each [Participaciones] * [Valor liquidativo]),",
        "    #\"Tipo cambiado\" = Table.TransformColumnTypes(#\"Personalizada agregada\",{{\"Saldo\", type number}})",
        "in",
        "    #\"Tipo cambiado\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Exception",
      "isHidden": false
    },
    {
      "name": "Dividendos",
      "lineageTag": "71d662a6-d45e-4164-ac31-d301ddfcca99",
      "queryGroupId": "3c6be78f-01f8-44b2-9b46-61c4ac6f0621",
      "navigationStepName": "Navegación",
      "text": [
        "let",
        "    Origen = Transacciones,",
        "    #\"Filas filtradas\" = Table.SelectRows(Origen, each ([Tipo Transacción] = \"Dividendos\"))",
        "in",
        "    #\"Filas filtradas\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Origen = Transacciones,\\n    #\\\"Filas filtradas\\\" = Table.SelectRows(Origen, each ([Tipo Transacción] = \\\"Dividendos\\\"))\\nin\\n    #\\\"Filas filtradas\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Exception",
      "isHidden": false
    },
    {
      "name": "Medidas Transacciones",
      "lineageTag": "1119b22a-9d0a-4769-8f0c-4498053d07e1",
      "queryGroupId": "3c6be78f-01f8-44b2-9b46-61c4ac6f0621",
      "navigationStepName": "Navegación",
      "text": [
        "let",
        "    Origen = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i44FAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Columna1 = _t]),",
        "    #\"Tipo cambiado\" = Table.TransformColumnTypes(Origen,{{\"Columna1\", type text}}),",
        "    #\"Columnas quitadas\" = Table.RemoveColumns(#\"Tipo cambiado\",{\"Columna1\"})",
        "in",
        "    #\"Columnas quitadas\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Origen = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\\\"i44FAA==\\\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Columna1 = _t]),\\n    #\\\"Tipo cambiado\\\" = Table.TransformColumnTypes(Origen,{{\\\"Columna1\\\", type text}}),\\n    #\\\"Columnas quitadas\\\" = Table.RemoveColumns(#\\\"Tipo cambiado\\\",{\\\"Columna1\\\"})\\nin\\n    #\\\"Columnas quitadas\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Medidas Saldo",
      "lineageTag": "d5a0786a-7d7e-410d-9408-bba78857846b",
      "queryGroupId": "3c6be78f-01f8-44b2-9b46-61c4ac6f0621",
      "navigationStepName": "Navegación",
      "text": [
        "let",
        "    Origen = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i44FAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Columna1 = _t]),",
        "    #\"Tipo cambiado\" = Table.TransformColumnTypes(Origen,{{\"Columna1\", type text}}),",
        "    #\"Columnas quitadas\" = Table.RemoveColumns(#\"Tipo cambiado\",{\"Columna1\"})",
        "in",
        "    #\"Columnas quitadas\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Origen = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\\\"i44FAA==\\\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Columna1 = _t]),\\n    #\\\"Tipo cambiado\\\" = Table.TransformColumnTypes(Origen,{{\\\"Columna1\\\", type text}}),\\n    #\\\"Columnas quitadas\\\" = Table.RemoveColumns(#\\\"Tipo cambiado\\\",{\\\"Columna1\\\"})\\nin\\n    #\\\"Columnas quitadas\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "IRPF Ahorro",
      "lineageTag": "04ca00c9-56eb-421e-94ea-73a2539081f8",
      "queryGroupId": "aa682b1e-fe65-4bb7-8264-1978bb5ccdfa",
      "navigationStepName": "Navegación",
      "text": [
        "let",
        "    Origen = #\"Origen Data File\",",
        "    T_Saldo_Table = Origen{[Item=\"T_IRPF_Ahorro\",Kind=\"Table\"]}[Data],",
        "    #\"Tipo cambiado\" = Table.TransformColumnTypes(T_Saldo_Table,{{\"Año\", Int64.Type}, {\"Año Final\", Int64.Type}, {\"Mínimo\", type number}, {\"Máximo\", type number}, {\"Tipo\", Percentage.Type}}),",
        "    #\"Columnas con nombre cambiado\" = Table.RenameColumns(#\"Tipo cambiado\",{{\"Año\", \"Año Actual\"}}),",
        "    #\"Personalizada agregada\" = Table.AddColumn(#\"Columnas con nombre cambiado\", \"Año\", each List.Numbers([Año Actual], (if [Año Final] = null then Date.Year(DateTime.LocalNow()) else [Año Final]) - [Año Actual] + 1)),",
        "    #\"Se expandió Personalizado\" = Table.ExpandListColumn(#\"Personalizada agregada\", \"Año\"),",
        "    #\"Tipo cambiado1\" = Table.TransformColumnTypes(#\"Se expandió Personalizado\",{{\"Año\", Int64.Type}}),",
        "    #\"Otras columnas quitadas\" = Table.SelectColumns(#\"Tipo cambiado1\",{\"Mínimo\", \"Máximo\", \"Tipo\", \"Año\"}),",
        "    #\"Filas ordenadas\" = Table.Sort(#\"Otras columnas quitadas\",{{\"Año\", Order.Ascending}})",
        "in",
        "    #\"Filas ordenadas\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Origen = Excel.Workbook(File.Contents(Path), null, true),\\n    T_Saldo_Table = Origen{[Item=\\\"T_IRPF_Ahorro\\\",Kind=\\\"Table\\\"]}[Data],\\n    #\\\"Tipo cambiado\\\" = Table.TransformColumnTypes(T_Saldo_Table,{{\\\"Año\\\", Int64.Type}, {\\\"Año Final\\\", Int64.Type}, {\\\"Mínimo\\\", type number}, {\\\"Máximo\\\", type number}, {\\\"Tipo\\\", Percentage.Type}}),\\n    #\\\"Columnas con nombre cambiado\\\" = Table.RenameColumns(#\\\"Tipo cambiado\\\",{{\\\"Año\\\", \\\"Año Actual\\\"}}),\\n    #\\\"Personalizada agregada\\\" = Table.AddColumn(#\\\"Columnas con nombre cambiado\\\", \\\"Año\\\", each List.Numbers([Año Actual], (if [Año Final] = null then Date.Year(DateTime.LocalNow()) else [Año Final]) - [Año Actual] + 1)),\\n    #\\\"Se expandió Personalizado\\\" = Table.ExpandListColumn(#\\\"Personalizada agregada\\\", \\\"Año\\\"),\\n    #\\\"Tipo cambiado1\\\" = Table.TransformColumnTypes(#\\\"Se expandió Personalizado\\\",{{\\\"Año\\\", Int64.Type}}),\\n    #\\\"Otras columnas quitadas\\\" = Table.SelectColumns(#\\\"Tipo cambiado1\\\",{\\\"Mínimo\\\", \\\"Máximo\\\", \\\"Tipo\\\", \\\"Año\\\"}),\\n    #\\\"Filas ordenadas\\\" = Table.Sort(#\\\"Otras columnas quitadas\\\",{{\\\"Año\\\", Order.Ascending}})\\nin\\n    #\\\"Filas ordenadas\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Medidas IRPF",
      "lineageTag": "8f3a51e4-9a1c-4933-885d-ca3ccd2b595f",
      "queryGroupId": "aa682b1e-fe65-4bb7-8264-1978bb5ccdfa",
      "navigationStepName": "Navegación",
      "text": [
        "let",
        "    Origen = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i44FAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Columna1 = _t]),",
        "    #\"Tipo cambiado\" = Table.TransformColumnTypes(Origen,{{\"Columna1\", type text}}),",
        "    #\"Columnas quitadas\" = Table.RemoveColumns(#\"Tipo cambiado\",{\"Columna1\"})",
        "in",
        "    #\"Columnas quitadas\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Origen = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\\\"i44FAA==\\\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Columna1 = _t]),\\n    #\\\"Tipo cambiado\\\" = Table.TransformColumnTypes(Origen,{{\\\"Columna1\\\", type text}}),\\n    #\\\"Columnas quitadas\\\" = Table.RemoveColumns(#\\\"Tipo cambiado\\\",{\\\"Columna1\\\"})\\nin\\n    #\\\"Columnas quitadas\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "CalcularFIFO",
      "lineageTag": "b9870c52-bffc-40ad-be25-a10da4a5e187",
      "queryGroupId": "aa682b1e-fe65-4bb7-8264-1978bb5ccdfa",
      "navigationStepName": "Navegación",
      "text": [
        "(acumulador as record, ticker as text, cantVenta as number, precioVenta as number) as record =>",
        "let",
        "    // Obtener el stock actual para el ticker, o una lista vacía si no existe",
        "    stockTickerAnterior = Record.FieldOrDefault(acumulador[Stock], ticker, {}),",
        "    ",
        "    // Consumir el stock según FIFO",
        "    consumoRealizado = ConsumoFIFO(stockTickerAnterior, cantVenta),",
        "    nuevoStockTicker = consumoRealizado[StockRestante],",
        "",
        "    // Actualizar el stock en el acumulador",
        "    // Aquí reemplazamos o añadimos el ticker utilizando Record.Combine",
        "    nuevoStock = Record.Combine({ ",
        "        acumulador[Stock], ",
        "        Record.FromList({ nuevoStockTicker }, { ticker }) ",
        "    }),",
        "",
        "    // Calcular el costo total de la venta y la ganancia",
        "    costoTotalVenta  = consumoRealizado[CostoAcumulado],",
        "    gananciaVenta    = (precioVenta * cantVenta) - costoTotalVenta,",
        "    gananciaAcumulada= acumulador[Ganancia] + gananciaVenta",
        "in",
        "    [",
        "        Stock    = nuevoStock, ",
        "        Ganancia = gananciaAcumulada",
        "    ]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Function",
      "isHidden": false
    },
    {
      "name": "ConsumoFIFO",
      "lineageTag": "353c8b9e-bc7a-41c4-b99c-0e09b803869c",
      "queryGroupId": "aa682b1e-fe65-4bb7-8264-1978bb5ccdfa",
      "navigationStepName": "Navegación",
      "text": [
        "let",
        "    Origen = (listaStock as list, cantidadRestante as number) as record =>",
        "        if cantidadRestante = 0 or List.IsEmpty(listaStock) then",
        "            [ StockRestante = listaStock, CostoAcumulado = 0 ]",
        "        else",
        "            let",
        "                primerLote = List.First(listaStock),",
        "                loteCantidad = primerLote[Cantidad],",
        "                lotePrecio   = primerLote[Precio],",
        "                resultado =",
        "                    if loteCantidad <= cantidadRestante then",
        "                        let",
        "                            // Consumir todo el lote y continuar",
        "                            siguiente         = @ConsumoFIFO(List.Skip(listaStock, 1), cantidadRestante - loteCantidad),",
        "                            costoLote         = loteCantidad * lotePrecio,",
        "                            costoAcumulado    = costoLote + siguiente[CostoAcumulado]",
        "                        in",
        "                            [ ",
        "                                StockRestante   = siguiente[StockRestante],",
        "                                CostoAcumulado = costoAcumulado",
        "                            ]",
        "                    else",
        "                        let",
        "                            // Consumir parte del lote y actualizar el lote",
        "                            nuevoPrimerLote   = [ Cantidad = loteCantidad - cantidadRestante, Precio = lotePrecio ],",
        "                            costoParcial      = cantidadRestante * lotePrecio,",
        "                            stockRestante     = List.Combine({ { nuevoPrimerLote }, List.Skip(listaStock, 1) })",
        "                        in",
        "                            [ ",
        "                                StockRestante   = stockRestante,",
        "                                CostoAcumulado = costoParcial",
        "                            ]",
        "            in",
        "                resultado",
        "in",
        "    Origen"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Function",
      "isHidden": false
    },
    {
      "name": "Pruebas",
      "lineageTag": "6c27150f-0f49-4ac9-9908-8520cd364d50",
      "queryGroupId": "cf55fb66-07b9-4867-8448-adfd845d26e2",
      "navigationStepName": "Navegación",
      "text": [
        "// Suponiendo que tienes una tabla llamada Transacciones",
        "let",
        "    // Paso 1: Definir la tabla de transacciones",
        "    Transacciones = Table.FromRecords({",
        "        [Acción=\"DE\", Tipo=\"Compra\", Cantidad=1000, Precio=100],",
        "        [Acción=\"DE\", Tipo=\"Compra\", Cantidad=500, Precio=125],",
        "        [Acción=\"DE\", Tipo=\"Venta\", Cantidad=750, Precio=150],",
        "        [Acción=\"DE\", Tipo=\"Compra\", Cantidad=400, Precio=140],",
        "        [Acción=\"DE\", Tipo=\"Venta\", Cantidad=1000, Precio=200],",
        "        [Acción=\"AAPL\", Tipo=\"Compra\", Cantidad=300, Precio=250],",
        "        [Acción=\"AAPL\", Tipo=\"Venta\", Cantidad=150, Precio=300]",
        "    }),",
        "    #\"Multiplicación insertada\" = Table.AddColumn(Transacciones, \"Multiplicación\", each [Cantidad] * [Precio], type number),",
        "    ",
        "    // Paso 2: Agregar una columna de índice para mantener el orden",
        "    TransaccionesConIndice = Table.AddIndexColumn(#\"Multiplicación insertada\", \"Índice\", 1, 1, Int64.Type),",
        "    ",
        "    // Paso 3: Definir la función CalcularFIFO",
        "    CalcularFIFO = (acumulador as record, ticker as text, cantVenta as number, precioVenta as number) as record =>",
        "    let",
        "        // Obtener el stock actual para el ticker, o una lista vacía si no existe",
        "        stockTickerAnterior = Record.FieldOrDefault(acumulador[Stock], ticker, {}),",
        "        ",
        "        // Función recursiva para consumir el stock según FIFO",
        "        ConsumoFIFO = (listaStock as list, cantidadRestante as number) as record =>",
        "            if cantidadRestante = 0 or List.IsEmpty(listaStock) then",
        "                [ StockRestante = listaStock, CostoAcumulado = 0 ]",
        "            else",
        "                let",
        "                    primerLote = List.First(listaStock),",
        "                    loteCantidad = primerLote[Cantidad],",
        "                    lotePrecio   = primerLote[Precio],",
        "                    resultado =",
        "                        if loteCantidad <= cantidadRestante then",
        "                            let",
        "                                siguiente         = @ConsumoFIFO(List.Skip(listaStock, 1), cantidadRestante - loteCantidad),",
        "                                costoLote         = loteCantidad * lotePrecio,",
        "                                costoAcumulado    = costoLote + siguiente[CostoAcumulado]",
        "                            in",
        "                                [ ",
        "                                    StockRestante   = siguiente[StockRestante],",
        "                                    CostoAcumulado = costoAcumulado",
        "                                ]",
        "                        else",
        "                            let",
        "                                nuevoPrimerLote   = [ Cantidad = loteCantidad - cantidadRestante, Precio = lotePrecio ],",
        "                                costoParcial      = cantidadRestante * lotePrecio,",
        "                                stockRestante     = List.Combine({ { nuevoPrimerLote }, List.Skip(listaStock, 1) })",
        "                            in",
        "                                [ ",
        "                                    StockRestante   = stockRestante,",
        "                                    CostoAcumulado = costoParcial",
        "                                ]",
        "                in",
        "                    resultado,",
        "        ",
        "        // Consumir el stock según FIFO",
        "        consumoRealizado = ConsumoFIFO(stockTickerAnterior, cantVenta),",
        "        nuevoStockTicker = consumoRealizado[StockRestante],",
        "        ",
        "        // Actualizar el stock en el acumulador usando Record.Combine",
        "        nuevoStock = Record.Combine({ ",
        "            acumulador[Stock], ",
        "            Record.FromList({ nuevoStockTicker }, { ticker }) ",
        "        }),",
        "        ",
        "        // Calcular el costo total de la venta y la ganancia",
        "        costoTotalVenta  = consumoRealizado[CostoAcumulado],",
        "        gananciaVenta    = (precioVenta * cantVenta) - costoTotalVenta,",
        "        gananciaAcumulada= acumulador[Ganancia] + gananciaVenta",
        "    in",
        "        [",
        "            Stock    = nuevoStock, ",
        "            Ganancia = gananciaAcumulada",
        "        ],",
        "    ",
        "    // Paso 4: Procesar las transacciones con List.Accumulate",
        "    Resultado = List.Accumulate(",
        "        Table.ToRecords(TransaccionesConIndice),",
        "        [ Stock = [], Ganancia = 0, GananciasPorVenta = {} ],",
        "        (acumulador, transaccion) =>",
        "            let",
        "                tipo = transaccion[Tipo],",
        "                ticker = transaccion[Acción],",
        "                cant = transaccion[Cantidad],",
        "                precio = transaccion[Precio],",
        "                // Verificar si es una compra o venta",
        "                nuevoEstado =",
        "                    if tipo = \"Compra\" then",
        "                        // Agregar al stock del ticker correspondiente",
        "                        let",
        "                            stockActual = Record.FieldOrDefault(acumulador[Stock], ticker, {}),",
        "                            nuevoStock = List.Combine({ stockActual, { [ Cantidad = cant, Precio = precio ] } }),",
        "                            // Usar Record.Combine para agregar o actualizar el ticker",
        "                            stockActualizado = Record.Combine({ ",
        "                                acumulador[Stock], ",
        "                                Record.FromList({ nuevoStock }, { ticker }) ",
        "                            }),",
        "                            // No hay ganancia en una compra",
        "                            gananciaPorVenta = List.Combine({ acumulador[GananciasPorVenta], { null } })",
        "                        in",
        "                            [",
        "                                Stock = stockActualizado,",
        "                                Ganancia = acumulador[Ganancia],",
        "                                GananciasPorVenta = gananciaPorVenta",
        "                            ]",
        "                    else",
        "                        // Procesar la venta con FIFO",
        "                        let",
        "                            resultadoFIFO = CalcularFIFO(acumulador, ticker, cant, precio),",
        "                            // Calcular la ganancia de esta venta",
        "                            gananciaActual = resultadoFIFO[Ganancia] - acumulador[Ganancia],",
        "                            // Añadir la ganancia de esta venta a la lista",
        "                            gananciaPorVenta = List.Combine({ acumulador[GananciasPorVenta], { gananciaActual } })",
        "                        in",
        "                            [",
        "                                Stock = resultadoFIFO[Stock],",
        "                                Ganancia = resultadoFIFO[Ganancia],",
        "                                GananciasPorVenta = gananciaPorVenta",
        "                            ]",
        "            in",
        "                nuevoEstado",
        "    ),",
        "    ",
        "    // Paso 5: Añadir la columna de Ganancias a la tabla original",
        "    // Primero, crear una lista de ganancias por fila",
        "    ListaGanancias = Resultado[GananciasPorVenta],",
        "    ",
        "    // Agregar la lista como una nueva columna a la tabla original",
        "    TransaccionesConGanancia = Table.AddColumn(",
        "    TransaccionesConIndice,",
        "    \"Ganancia\",",
        "    each List.Skip(ListaGanancias, [Índice] - 1){0}",
        ")",
        "in",
        "    TransaccionesConGanancia"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Path (Prod)",
      "lineageTag": "ed311670-0039-42b3-8c51-44f01d93b7f5",
      "navigationStepName": "Navegación",
      "text": [
        "\"H:\\Gastos-Ingresos.xlsx\" meta [IsParameterQuery=true, Type=\"Any\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Text",
      "isHidden": false
    },
    {
      "name": "Path (Test)",
      "lineageTag": "f737d9c4-c6ff-4d17-87cb-57bd2af5ee83",
      "navigationStepName": "Navegación",
      "text": [
        "\"https://github.com/imoremu/financeBI/raw/refs/heads/main/data/test/data.xlsx\" meta [IsParameterQuery=true, Type=\"Any\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Text",
      "isHidden": false
    },
    {
      "name": "Path (Dev)",
      "lineageTag": "729f91fe-dd33-4afe-9afa-c7c19df53d2e",
      "navigationStepName": "Navegación",
      "text": [
        "\"https://github.com/imoremu/financeBI/raw/refs/heads/main/data/dev/data.xlsx\" meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Text"
    },
    {
      "name": "Origen Data File",
      "navigationStepName": "Navegación",
      "text": [
        "let",
        "    Origen = if Text.Contains(Path, \"http\") then Excel.Workbook(Web.Contents(Path), null, true) else Excel.Workbook(File.Contents(Path), null, true)",
        "in",
        "    Origen"
      ],
      "isDirectQuery": false,
      "resultType": "Table"
    }
  ],
  "queryGroups": [
    {
      "name": "Movimientos",
      "id": "f68b0a3d-1780-4ae2-ad40-039a03b8127b",
      "description": ""
    },
    {
      "name": "IRPF",
      "id": "aa682b1e-fe65-4bb7-8264-1978bb5ccdfa",
      "order": 2,
      "description": ""
    },
    {
      "name": "Pruebas",
      "id": "cf55fb66-07b9-4867-8448-adfd845d26e2",
      "order": 2,
      "description": ""
    },
    {
      "name": "Saldo",
      "id": "3c6be78f-01f8-44b2-9b46-61c4ac6f0621",
      "order": 3,
      "description": ""
    }
  ],
  "culture": "es-ES",
  "firewallEnabled": true
}